{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ale A\\\\Desktop\\\\java-ide\\\\src\\\\components\\\\SQLiteManager.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n\n// Componente SQLiteManager\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SQLiteManager = () => {\n  _s();\n  const [db, setDb] = useState(null); // Estado para la base de datos\n  const [query, setQuery] = useState(\"\"); // Estado para la consulta SQL\n  const [result, setResult] = useState(null); // Estado para los resultados\n  const [error, setError] = useState(null); // Estado para errores\n  const [dbInitialized, setDbInitialized] = useState(false); // Estado para saber si la base de datos está inicializada\n\n  // Inicializar la base de datos SQLite de manera dinámica\n  const initDb = async () => {\n    try {\n      const SQL = await import(\"sql.js\"); // Importar dinámicamente sql.js\n      const sqlPromise = await SQL.default({\n        locateFile: file => `/sql-wasm.wasm` // Ubicación del archivo .wasm en la carpeta public\n      });\n      const database = new sqlPromise.Database(); // Crear una base de datos en memoria\n      setDb(database);\n      setDbInitialized(true); // Marcar la base de datos como inicializada\n      console.log(\"Base de datos SQLite inicializada.\");\n    } catch (e) {\n      console.error(\"Error al inicializar SQLite:\", e);\n      setError(\"Error al inicializar SQLite: \" + e.message);\n    }\n  };\n\n  // Ejecutar consulta SQL\n  const executeQuery = () => {\n    if (db) {\n      try {\n        const res = db.exec(query); // Ejecutar la consulta\n        setResult(res);\n        setError(null);\n      } catch (e) {\n        setError(e.message);\n        setResult(null);\n      }\n    }\n  };\n\n  // Renderizar los resultados de la consulta\n  const renderResult = () => {\n    if (!result || result.length === 0) return null;\n    return /*#__PURE__*/_jsxDEV(\"table\", {\n      style: {\n        width: \"100%\",\n        border: \"1px solid black\",\n        marginTop: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: result[0].columns.map((col, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n            style: {\n              border: \"1px solid black\",\n              padding: \"8px\"\n            },\n            children: col\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: result[0].values.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((val, valIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n            style: {\n              border: \"1px solid black\",\n              padding: \"8px\"\n            },\n            children: val\n          }, valIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 17\n          }, this))\n        }, rowIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\",\n      fontFamily: \"Arial, sans-serif\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Gestor de SQLite en React\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: initDb,\n      style: {\n        padding: \"10px 20px\",\n        backgroundColor: dbInitialized ? \"green\" : \"#007BFF\",\n        color: \"white\",\n        border: \"none\",\n        borderRadius: \"5px\",\n        cursor: \"pointer\",\n        marginBottom: \"20px\"\n      },\n      disabled: dbInitialized // Desactivar el botón si ya está inicializado\n      ,\n      children: dbInitialized ? \"Base de Datos Inicializada\" : \"Inicializar Base de Datos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), dbInitialized && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          rows: \"5\",\n          cols: \"50\",\n          value: query,\n          onChange: e => setQuery(e.target.value),\n          placeholder: \"Escribe tu consulta SQL aqu\\xED...\",\n          style: {\n            width: \"100%\",\n            padding: \"10px\",\n            marginBottom: \"10px\",\n            borderRadius: \"5px\",\n            border: \"1px solid #ccc\",\n            fontFamily: \"monospace\",\n            fontSize: \"16px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: executeQuery,\n          style: {\n            padding: \"10px 20px\",\n            backgroundColor: \"#28a745\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: \"5px\",\n            cursor: \"pointer\"\n          },\n          children: \"Ejecutar Consulta\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)\n    }, void 0, false), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\",\n        marginTop: \"20px\"\n      },\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: renderResult()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(SQLiteManager, \"ehNRtDQWBQ79BuqYnFpm+AG2H5E=\");\n_c = SQLiteManager;\nexport default SQLiteManager;\nvar _c;\n$RefreshReg$(_c, \"SQLiteManager\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","SQLiteManager","_s","db","setDb","query","setQuery","result","setResult","error","setError","dbInitialized","setDbInitialized","initDb","SQL","sqlPromise","default","locateFile","file","database","Database","console","log","e","message","executeQuery","res","exec","renderResult","length","style","width","border","marginTop","children","columns","map","col","index","padding","fileName","_jsxFileName","lineNumber","columnNumber","values","row","rowIndex","val","valIndex","fontFamily","onClick","backgroundColor","color","borderRadius","cursor","marginBottom","disabled","rows","cols","value","onChange","target","placeholder","fontSize","_c","$RefreshReg$"],"sources":["C:/Users/Ale A/Desktop/java-ide/src/components/SQLiteManager.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\n// Componente SQLiteManager\r\nconst SQLiteManager = () => {\r\n  const [db, setDb] = useState(null); // Estado para la base de datos\r\n  const [query, setQuery] = useState(\"\"); // Estado para la consulta SQL\r\n  const [result, setResult] = useState(null); // Estado para los resultados\r\n  const [error, setError] = useState(null); // Estado para errores\r\n  const [dbInitialized, setDbInitialized] = useState(false); // Estado para saber si la base de datos está inicializada\r\n\r\n  // Inicializar la base de datos SQLite de manera dinámica\r\n  const initDb = async () => {\r\n    try {\r\n      const SQL = await import(\"sql.js\"); // Importar dinámicamente sql.js\r\n      const sqlPromise = await SQL.default({\r\n        locateFile: (file) => `/sql-wasm.wasm`, // Ubicación del archivo .wasm en la carpeta public\r\n      });\r\n\r\n      const database = new sqlPromise.Database(); // Crear una base de datos en memoria\r\n      setDb(database);\r\n      setDbInitialized(true); // Marcar la base de datos como inicializada\r\n      console.log(\"Base de datos SQLite inicializada.\");\r\n    } catch (e) {\r\n      console.error(\"Error al inicializar SQLite:\", e);\r\n      setError(\"Error al inicializar SQLite: \" + e.message);\r\n    }\r\n  };\r\n\r\n  // Ejecutar consulta SQL\r\n  const executeQuery = () => {\r\n    if (db) {\r\n      try {\r\n        const res = db.exec(query); // Ejecutar la consulta\r\n        setResult(res);\r\n        setError(null);\r\n      } catch (e) {\r\n        setError(e.message);\r\n        setResult(null);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Renderizar los resultados de la consulta\r\n  const renderResult = () => {\r\n    if (!result || result.length === 0) return null;\r\n\r\n    return (\r\n      <table style={{ width: \"100%\", border: \"1px solid black\", marginTop: \"20px\" }}>\r\n        <thead>\r\n          <tr>\r\n            {result[0].columns.map((col, index) => (\r\n              <th key={index} style={{ border: \"1px solid black\", padding: \"8px\" }}>\r\n                {col}\r\n              </th>\r\n            ))}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {result[0].values.map((row, rowIndex) => (\r\n            <tr key={rowIndex}>\r\n              {row.map((val, valIndex) => (\r\n                <td key={valIndex} style={{ border: \"1px solid black\", padding: \"8px\" }}>\r\n                  {val}\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: \"20px\", fontFamily: \"Arial, sans-serif\" }}>\r\n      <h2>Gestor de SQLite en React</h2>\r\n\r\n      {/* Botón para inicializar la base de datos */}\r\n      <button\r\n        onClick={initDb}\r\n        style={{\r\n          padding: \"10px 20px\",\r\n          backgroundColor: dbInitialized ? \"green\" : \"#007BFF\",\r\n          color: \"white\",\r\n          border: \"none\",\r\n          borderRadius: \"5px\",\r\n          cursor: \"pointer\",\r\n          marginBottom: \"20px\",\r\n        }}\r\n        disabled={dbInitialized} // Desactivar el botón si ya está inicializado\r\n      >\r\n        {dbInitialized ? \"Base de Datos Inicializada\" : \"Inicializar Base de Datos\"}\r\n      </button>\r\n\r\n      {/* Mostrar el cuadro de texto solo si la base de datos está inicializada */}\r\n      {dbInitialized && (\r\n        <>\r\n          <div>\r\n            <textarea\r\n              rows=\"5\"\r\n              cols=\"50\"\r\n              value={query}\r\n              onChange={(e) => setQuery(e.target.value)}\r\n              placeholder=\"Escribe tu consulta SQL aquí...\"\r\n              style={{\r\n                width: \"100%\",\r\n                padding: \"10px\",\r\n                marginBottom: \"10px\",\r\n                borderRadius: \"5px\",\r\n                border: \"1px solid #ccc\",\r\n                fontFamily: \"monospace\",\r\n                fontSize: \"16px\",\r\n              }}\r\n            />\r\n            <br />\r\n            <button\r\n              onClick={executeQuery}\r\n              style={{\r\n                padding: \"10px 20px\",\r\n                backgroundColor: \"#28a745\",\r\n                color: \"white\",\r\n                border: \"none\",\r\n                borderRadius: \"5px\",\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              Ejecutar Consulta\r\n            </button>\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      {/* Mostrar error si hay alguno */}\r\n      {error && <p style={{ color: \"red\", marginTop: \"20px\" }}>Error: {error}</p>}\r\n\r\n      {/* Mostrar los resultados de la consulta */}\r\n      <div>{renderResult()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SQLiteManager;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}