{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ale A\\\\Desktop\\\\java-ide\\\\src\\\\components\\\\DatabaseManager.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DatabaseManager = () => {\n  _s();\n  // Estado para almacenar los registros\n  const [data, setData] = useState([]);\n  const [newItem, setNewItem] = useState({\n    name: \"\",\n    description: \"\"\n  });\n\n  // Simulación de una API de ejemplo\n  const apiURL = \"https://jsonplaceholder.typicode.com/posts\";\n\n  // Cargar datos desde la API (Leer)\n  useEffect(() => {\n    fetch(apiURL).then(response => response.json()).then(data => setData(data.slice(0, 5))) // Limitar a 5 elementos para el ejemplo\n    .catch(error => console.error(\"Error al cargar datos:\", error));\n  }, []);\n\n  // Añadir un nuevo registro (Crear)\n  const addItem = () => {\n    const newData = [...data, newItem];\n    setData(newData);\n    setNewItem({\n      name: \"\",\n      description: \"\"\n    });\n    // Aquí enviarías los datos a la API para guardar en la base de datos\n  };\n\n  // Actualizar un registro existente\n  const updateItem = (index, updatedItem) => {\n    const updatedData = data.map((item, i) => i === index ? updatedItem : item);\n    setData(updatedData);\n    // Aquí enviarías los datos actualizados a la API\n  };\n\n  // Eliminar un registro\n  const deleteItem = index => {\n    const filteredData = data.filter((_, i) => i !== index);\n    setData(filteredData);\n    // Aquí eliminarías el elemento en la API\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Gestor de Base de Datos\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Nombre\",\n        value: newItem.name,\n        onChange: e => setNewItem({\n          ...newItem,\n          name: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Descripci\\xF3n\",\n        value: newItem.description,\n        onChange: e => setNewItem({\n          ...newItem,\n          description: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addItem,\n        children: \"A\\xF1adir\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Nombre\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Descripci\\xF3n\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Acciones\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: data.map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.name || item.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: item.description || item.body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => updateItem(index, {\n                ...item,\n                name: prompt(\"Nuevo nombre\", item.name || item.title),\n                description: prompt(\"Nueva descripción\", item.description || item.body)\n              }),\n              children: \"Actualizar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => deleteItem(index),\n              children: \"Eliminar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(DatabaseManager, \"FqGi6jDKN0Ay9jyxboqjoN3dYvA=\");\n_c = DatabaseManager;\nexport default DatabaseManager;\nvar _c;\n$RefreshReg$(_c, \"DatabaseManager\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","DatabaseManager","_s","data","setData","newItem","setNewItem","name","description","apiURL","fetch","then","response","json","slice","catch","error","console","addItem","newData","updateItem","index","updatedItem","updatedData","map","item","i","deleteItem","filteredData","filter","_","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","title","body","prompt","_c","$RefreshReg$"],"sources":["C:/Users/Ale A/Desktop/java-ide/src/components/DatabaseManager.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst DatabaseManager = () => {\r\n  // Estado para almacenar los registros\r\n  const [data, setData] = useState([]);\r\n  const [newItem, setNewItem] = useState({ name: \"\", description: \"\" });\r\n\r\n  // Simulación de una API de ejemplo\r\n  const apiURL = \"https://jsonplaceholder.typicode.com/posts\";\r\n\r\n  // Cargar datos desde la API (Leer)\r\n  useEffect(() => {\r\n    fetch(apiURL)\r\n      .then((response) => response.json())\r\n      .then((data) => setData(data.slice(0, 5))) // Limitar a 5 elementos para el ejemplo\r\n      .catch((error) => console.error(\"Error al cargar datos:\", error));\r\n  }, []);\r\n\r\n  // Añadir un nuevo registro (Crear)\r\n  const addItem = () => {\r\n    const newData = [...data, newItem];\r\n    setData(newData);\r\n    setNewItem({ name: \"\", description: \"\" });\r\n    // Aquí enviarías los datos a la API para guardar en la base de datos\r\n  };\r\n\r\n  // Actualizar un registro existente\r\n  const updateItem = (index, updatedItem) => {\r\n    const updatedData = data.map((item, i) => (i === index ? updatedItem : item));\r\n    setData(updatedData);\r\n    // Aquí enviarías los datos actualizados a la API\r\n  };\r\n\r\n  // Eliminar un registro\r\n  const deleteItem = (index) => {\r\n    const filteredData = data.filter((_, i) => i !== index);\r\n    setData(filteredData);\r\n    // Aquí eliminarías el elemento en la API\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Gestor de Base de Datos</h2>\r\n\r\n      {/* Formulario para añadir nuevo item */}\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Nombre\"\r\n          value={newItem.name}\r\n          onChange={(e) => setNewItem({ ...newItem, name: e.target.value })}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Descripción\"\r\n          value={newItem.description}\r\n          onChange={(e) => setNewItem({ ...newItem, description: e.target.value })}\r\n        />\r\n        <button onClick={addItem}>Añadir</button>\r\n      </div>\r\n\r\n      {/* Mostrar los datos */}\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Nombre</th>\r\n            <th>Descripción</th>\r\n            <th>Acciones</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {data.map((item, index) => (\r\n            <tr key={index}>\r\n              <td>{item.name || item.title}</td>\r\n              <td>{item.description || item.body}</td>\r\n              <td>\r\n                {/* Botón para actualizar */}\r\n                <button\r\n                  onClick={() =>\r\n                    updateItem(index, {\r\n                      ...item,\r\n                      name: prompt(\"Nuevo nombre\", item.name || item.title),\r\n                      description: prompt(\"Nueva descripción\", item.description || item.body),\r\n                    })\r\n                  }\r\n                >\r\n                  Actualizar\r\n                </button>\r\n                {/* Botón para eliminar */}\r\n                <button onClick={() => deleteItem(index)}>Eliminar</button>\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DatabaseManager;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}